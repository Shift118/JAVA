<?xml version="1.0" encoding="UTF-8"?>
<section name="Workbench">
	<section name="notepad4e.views.NotepadView">
		<item key="NumOfTabs" value="1"/>
		<item key="TabText0" value="1- OverLoading =&gt; Is when you Make the same function again but with different arguments.&#x0D;&#x0A;2- OverRiding =&gt; I when you have a child class that runs the same function in the same class but overrides it.&#x0D;&#x0A;&#x0D;&#x0A;Final methods =&gt; cannot be overridden for functions or cannot be extended for classes . This can be useful for security purposes.&#x0D;&#x0A;// public final boolean validatePassword(String username, String Password)&#x0D;&#x0A;// public final class Color&#x0D;&#x0A;&#x0D;&#x0A;Abstract class =&gt; Is a class that can&apos;t be called like &quot; Animal a1 = new Animal();  &quot; . It acts like an interface and can be extended to subclasses. You can also make variables in the abstract classes without initiating variables with a value.&#x0D;&#x0A;&#x0D;&#x0A;Interface =&gt; Like an Abstract class but you don&apos;t have to write the word abstract in a function to make it obligatory for it to be inherated it is by default there also you cannot extend it. It can only be implemented. Moreover, every variable you are going to make will be both static and final so you have to initiate every variable.&#x0D;&#x0A;&#x0D;&#x0A;// public class Cat implement Animal {}&#x0D;&#x0A;&#x0D;&#x0A;"/>
		<item key="TabStyle0" value=""/>
		<item key="TabTitle0" value="Note 1"/>
		<item key="TabEditable0" value="true"/>
		<item key="TabBullets0" value=""/>
	</section>
</section>
